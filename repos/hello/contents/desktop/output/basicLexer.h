/** \file
 *  This C header file was generated by $ANTLR version 3.3 Nov 30, 2010 12:45:30
 *
 *     -  From the grammar source file : /Users/mcc/work/h/hello/desktop/basic.g
 *     -                            On : 2011-09-05 21:37:10
 *     -                 for the lexer : basicLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer basicLexer has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pbasicLexer, which is returned from a call to basicLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 * * The methods in pbasicLexer are  as follows:
 *
 *  -  void      pbasicLexer->STRING(pbasicLexer)
 *  -  void      pbasicLexer->LINEN(pbasicLexer)
 *  -  void      pbasicLexer->WHITE(pbasicLexer)
 *  -  void      pbasicLexer->PRINT(pbasicLexer)
 *  -  void      pbasicLexer->GOTO(pbasicLexer)
 *  -  void      pbasicLexer->REM(pbasicLexer)
 *  -  void      pbasicLexer->LOAD(pbasicLexer)
 *  -  void      pbasicLexer->SAVE(pbasicLexer)
 *  -  void      pbasicLexer->RUN(pbasicLexer)
 *  -  void      pbasicLexer->CATALOG(pbasicLexer)
 *  -  void      pbasicLexer->LIST(pbasicLexer)
 *  -  void      pbasicLexer->TRASHY(pbasicLexer)
 *  -  void      pbasicLexer->A(pbasicLexer)
 *  -  void      pbasicLexer->B(pbasicLexer)
 *  -  void      pbasicLexer->C(pbasicLexer)
 *  -  void      pbasicLexer->D(pbasicLexer)
 *  -  void      pbasicLexer->E(pbasicLexer)
 *  -  void      pbasicLexer->F(pbasicLexer)
 *  -  void      pbasicLexer->G(pbasicLexer)
 *  -  void      pbasicLexer->H(pbasicLexer)
 *  -  void      pbasicLexer->I(pbasicLexer)
 *  -  void      pbasicLexer->J(pbasicLexer)
 *  -  void      pbasicLexer->K(pbasicLexer)
 *  -  void      pbasicLexer->L(pbasicLexer)
 *  -  void      pbasicLexer->M(pbasicLexer)
 *  -  void      pbasicLexer->N(pbasicLexer)
 *  -  void      pbasicLexer->O(pbasicLexer)
 *  -  void      pbasicLexer->P(pbasicLexer)
 *  -  void      pbasicLexer->Q(pbasicLexer)
 *  -  void      pbasicLexer->R(pbasicLexer)
 *  -  void      pbasicLexer->S(pbasicLexer)
 *  -  void      pbasicLexer->T(pbasicLexer)
 *  -  void      pbasicLexer->U(pbasicLexer)
 *  -  void      pbasicLexer->V(pbasicLexer)
 *  -  void      pbasicLexer->W(pbasicLexer)
 *  -  void      pbasicLexer->X(pbasicLexer)
 *  -  void      pbasicLexer->Y(pbasicLexer)
 *  -  void      pbasicLexer->Z(pbasicLexer)
 *  -  void      pbasicLexer->Tokens(pbasicLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_basicLexer_H
#define _basicLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct basicLexer_Ctx_struct basicLexer, * pbasicLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for basicLexer
 */
struct basicLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;


     void (*mSTRING)	(struct basicLexer_Ctx_struct * ctx);
     void (*mLINEN)	(struct basicLexer_Ctx_struct * ctx);
     void (*mWHITE)	(struct basicLexer_Ctx_struct * ctx);
     void (*mPRINT)	(struct basicLexer_Ctx_struct * ctx);
     void (*mGOTO)	(struct basicLexer_Ctx_struct * ctx);
     void (*mREM)	(struct basicLexer_Ctx_struct * ctx);
     void (*mLOAD)	(struct basicLexer_Ctx_struct * ctx);
     void (*mSAVE)	(struct basicLexer_Ctx_struct * ctx);
     void (*mRUN)	(struct basicLexer_Ctx_struct * ctx);
     void (*mCATALOG)	(struct basicLexer_Ctx_struct * ctx);
     void (*mLIST)	(struct basicLexer_Ctx_struct * ctx);
     void (*mTRASHY)	(struct basicLexer_Ctx_struct * ctx);
     void (*mA)	(struct basicLexer_Ctx_struct * ctx);
     void (*mB)	(struct basicLexer_Ctx_struct * ctx);
     void (*mC)	(struct basicLexer_Ctx_struct * ctx);
     void (*mD)	(struct basicLexer_Ctx_struct * ctx);
     void (*mE)	(struct basicLexer_Ctx_struct * ctx);
     void (*mF)	(struct basicLexer_Ctx_struct * ctx);
     void (*mG)	(struct basicLexer_Ctx_struct * ctx);
     void (*mH)	(struct basicLexer_Ctx_struct * ctx);
     void (*mI)	(struct basicLexer_Ctx_struct * ctx);
     void (*mJ)	(struct basicLexer_Ctx_struct * ctx);
     void (*mK)	(struct basicLexer_Ctx_struct * ctx);
     void (*mL)	(struct basicLexer_Ctx_struct * ctx);
     void (*mM)	(struct basicLexer_Ctx_struct * ctx);
     void (*mN)	(struct basicLexer_Ctx_struct * ctx);
     void (*mO)	(struct basicLexer_Ctx_struct * ctx);
     void (*mP)	(struct basicLexer_Ctx_struct * ctx);
     void (*mQ)	(struct basicLexer_Ctx_struct * ctx);
     void (*mR)	(struct basicLexer_Ctx_struct * ctx);
     void (*mS)	(struct basicLexer_Ctx_struct * ctx);
     void (*mT)	(struct basicLexer_Ctx_struct * ctx);
     void (*mU)	(struct basicLexer_Ctx_struct * ctx);
     void (*mV)	(struct basicLexer_Ctx_struct * ctx);
     void (*mW)	(struct basicLexer_Ctx_struct * ctx);
     void (*mX)	(struct basicLexer_Ctx_struct * ctx);
     void (*mY)	(struct basicLexer_Ctx_struct * ctx);
     void (*mZ)	(struct basicLexer_Ctx_struct * ctx);
     void (*mTokens)	(struct basicLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct basicLexer_Ctx_struct * ctx);
    void	    (*free)   (struct basicLexer_Ctx_struct * ctx);
        
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pbasicLexer basicLexerNew         (pANTLR3_INPUT_STREAM instream);
ANTLR3_API pbasicLexer basicLexerNewSSD      (pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the lexer will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define EOF      -1
#define WHITE      4
#define LINEN      5
#define PRINT      6
#define GOTO      7
#define TRASHY      8
#define REM      9
#define LOAD      10
#define SAVE      11
#define RUN      12
#define CATALOG      13
#define LIST      14
#define STRING      15
#define P      16
#define R      17
#define I      18
#define N      19
#define T      20
#define G      21
#define O      22
#define E      23
#define M      24
#define L      25
#define A      26
#define D      27
#define S      28
#define V      29
#define U      30
#define C      31
#define B      32
#define F      33
#define H      34
#define J      35
#define K      36
#define Q      37
#define W      38
#define X      39
#define Y      40
#define Z      41
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for basicLexer
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
