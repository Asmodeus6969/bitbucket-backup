diff --git a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -56,50 +56,6 @@
 ENDIF(CMAKE_COMPILER_IS_GNUCC)
 ENDIF(POLYCODE_DEBUG_SYMBOLS)
 
-MESSAGE(DEBUG " CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}")
-
-# If the following large ugly mess is not present, failures can occur with -G "Unix Makefiles".
-# Even WITH this, you may get "library not found" errors on mingw first run; if so just re-run.
-# FIXME: Shouldn't be necessary if FIND_LIBRARY were working on mingw.
-IF (MINGW)
-LINK_DIRECTORIES(${POLYCODE_RELEASE_DIR}/Framework/Core/Dependencies/lib)
-LINK_DIRECTORIES(${POLYCODE_RELEASE_DIR}/Framework/Modules/Dependencies/lib)
-SET(ZLIB_LIBRARY zlib)
-SET(ZLIB_INCLUDE_DIR ${POLYCODE_RELEASE_DIR}/Framework/Core/Dependencies/include)
-SET(OGG_LIBRARY libogg)
-SET(OGG_INCLUDE_DIR ${POLYCODE_RELEASE_DIR}/Framework/Core/Dependencies/include)
-SET(PNG_LIBRARY png)
-SET(PNG_INCLUDE_DIR ${POLYCODE_RELEASE_DIR}/Framework/Core/Dependencies/include)
-SET(PHYSFS_LIBRARY physfs)
-SET(PHYSFS_INCLUDE_DIR ${POLYCODE_RELEASE_DIR}/Framework/Core/Dependencies/include)
-SET(OPENAL_LIBRARY OpenAL32)
-SET(OPENAL_INCLUDE_DIR ${POLYCODE_RELEASE_DIR}/Framework/Core/Dependencies/include/AL)
-SET(FREETYPE_LIBRARY freetype)
-SET(FREETYPE_INCLUDE_DIRS ${POLYCODE_RELEASE_DIR}/Framework/Core/Dependencies/include)
-SET(VORBIS_LIBRARY libvorbis)
-SET(VORBIS_INCLUDE_DIR ${POLYCODE_RELEASE_DIR}/Framework/Core/Dependencies/include)
-SET(VORBISFILE_LIBRARY libvorbisfile)
-SET(VORBISFILE_INCLUDE_DIR ${POLYCODE_RELEASE_DIR}/Framework/Core/Dependencies/include)
-SET(LUA_LIBRARY lua5.1)
-SET(LUA_LIBRARIES lua5.1)
-SET(LUA_INCLUDE_DIR ${POLYCODE_RELEASE_DIR}/Framework/Core/Dependencies/include/lua5.1)
-SET(BOX2D_RELEASE_LIBRARY Box2D)
-SET(BOX2D_DEBUG_LIBRARY Box2D)
-SET(BOX2D_INCLUDE_DIR ${POLYCODE_RELEASE_DIR}/Framework/Modules/Dependencies/include)
-SET(ASSIMP_INCLUDE_DIR ${POLYCODE_RELEASE_DIR}/Framework/Core/Dependencies/include)
-SET(BULLET_INCLUDE_DIR ${POLYCODE_RELEASE_DIR}/Framework/Modules/Dependencies/include/bullet)
-SET(LIBBULLETCOLLISION BulletCollision)
-SET(LIBBULLETDYNAMICS BulletDynamics)
-SET(LIBBULLETMATH LinearMath)
-SET(LIBBULLETMULTITHREADED BulletMultiThreaded)
-SET(LIBBULLETSOFTBODY BulletSoftBody)
-SET(LIBBULLETCOLLISION_DEBUG BulletCollision)
-SET(LIBBULLETDYNAMICS_DEBUG BulletDynamics)
-SET(LIBBULLETMATH_DEBUG LinearMath)
-SET(LIBBULLETMULTITHREADED_DEBUG BulletMultiThreaded)
-SET(LIBBULLETSOFTBODY_DEBUG BulletSoftBody)
-ENDIF()
-
 # Process subdirectories
 ADD_SUBDIRECTORY(Core/Contents)
 ADD_SUBDIRECTORY("Assets/Default asset pack")
diff --git a/Core/Contents/Source/PolyScene.cpp b/Core/Contents/Source/PolyScene.cpp
--- a/Core/Contents/Source/PolyScene.cpp
+++ b/Core/Contents/Source/PolyScene.cpp
@@ -47,15 +47,9 @@
 	hasLightmaps = false;
 	clearColor.setColor(0.13f,0.13f,0.13f,1.0f); 
 	ambientColor.setColor(0.0,0.0,0.0,1.0);
-	fogColor.setColor(0.0,0.0,0.0,1.0);
 	useClearColor = false;
 	ownsChildren = false;
 	ownsCamera = true;
-	fogEnabled=false;
-	fogMode=0;
-	fogDensity=0;
-	fogStartDepth=0;
-	fogEndDepth=0;
 	CoreServices::getInstance()->getSceneManager()->addScene(this);	
 }
 
@@ -69,15 +63,9 @@
 	hasLightmaps = false;
 	clearColor.setColor(0.13f,0.13f,0.13f,1.0f); 
 	ambientColor.setColor(0.0,0.0,0.0,1.0);	
-	fogColor.setColor(0.0,0.0,0.0,1.0);
 	useClearColor = false;
 	ownsChildren = false;
 	ownsCamera = true;
-	fogEnabled=false;
-	fogMode=0;
-	fogDensity=0;
-	fogStartDepth=0;
-	fogEndDepth=0;
 	if (!isSceneVirtual) {
 		CoreServices::getInstance()->getSceneManager()->addScene(this);
 	}
diff --git a/Core/Contents/Source/PolyScreenMesh.cpp b/Core/Contents/Source/PolyScreenMesh.cpp
--- a/Core/Contents/Source/PolyScreenMesh.cpp
+++ b/Core/Contents/Source/PolyScreenMesh.cpp
@@ -41,14 +41,14 @@
 	mesh = new Mesh(fileName);
 	lineSmooth = false;
 	lineWidth = 1.0;
-	ownsMesh = true;
+	
 }
 
 ScreenMesh::ScreenMesh(int meshType) : ScreenEntity(), material(NULL), texture(NULL) {
 	mesh = new Mesh(meshType);
 	lineSmooth = false;
 	lineWidth = 1.0;
-	ownsMesh = true;
+	
 }
 
 ScreenMesh *ScreenMesh::ScreenMeshWithMesh(Mesh *mesh) {
diff --git a/Core/Contents/Source/PolyWinCore.cpp b/Core/Contents/Source/PolyWinCore.cpp
--- a/Core/Contents/Source/PolyWinCore.cpp
+++ b/Core/Contents/Source/PolyWinCore.cpp
@@ -121,7 +121,7 @@
 		Logger::log("Error initializing sockets!\n");
 	}
 
-	((OpenGLRenderer*)renderer)->Init();
+	((OpenGLRenderer*)renderer)->init();
 
 	wglSwapIntervalEXT = (PFNWGLSWAPINTERVALEXTPROC) wglGetProcAddress("wglSwapIntervalEXT");
 	wglGetSwapIntervalEXT = (PFNWGLGETSWAPINTERVALEXTPROC) wglGetProcAddress("wglGetSwapIntervalEXT");
diff --git a/Modules/Contents/3DPhysics/Include/PolyCollisionScene.h b/Modules/Contents/3DPhysics/Include/PolyCollisionScene.h
--- a/Modules/Contents/3DPhysics/Include/PolyCollisionScene.h
+++ b/Modules/Contents/3DPhysics/Include/PolyCollisionScene.h
@@ -119,7 +119,7 @@
 			//@}
 			// ----------------------------------------------------------------------------------------------------------------
 			
-//		protected:
+		protected:
 		
 			std::vector<CollisionSceneEntity*> collisionChildren;
 			btCollisionWorld *world;
diff --git a/Toolchain-mingw32.cmake b/Toolchain-mingw32.cmake
new file mode 100644
--- /dev/null
+++ b/Toolchain-mingw32.cmake
@@ -0,0 +1,21 @@
+# the name of the target operating system
+SET(CMAKE_SYSTEM_NAME Windows)
+
+# which compilers to use for C and C++
+SET(CMAKE_C_COMPILER i486-mingw32-gcc)
+SET(CMAKE_CXX_COMPILER i486-mingw32-g++)
+SET(CMAKE_RC_COMPILER i486-mingw32-windres)
+
+# here is the target environment located
+SET(POLYCODE_DIRECTORY "/home/cib/projects/Polycode")
+SET(CMAKE_FIND_ROOT_PATH  /usr/i486-mingw32; ${POLYCODE_DIRECTORY}/Release/Windows/Framework/Core/Dependencies; ${POLYCODE_DIRECTORY}/Release/Windows/Framework/Tools/Dependencies; /home/cib/projects/Polycode/Release/Windows/Framework/Modules/Dependencies; )
+
+# adjust the default behaviour of the FIND_XXX() commands:
+# search headers and libraries in the target environment, search 
+# programs in the host environment
+set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
+set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
+set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
+
+# Paste the below into the relevant cmake files.
+#set(CMAKE_CXX_FLAGS "-D_WINDOWS -D_MINGW -D_WIN32 -DWIN32 -D__MINGW__")
